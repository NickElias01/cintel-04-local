[{"name": "app.py", "content": "# ------------------------------------------------------------------------------\n# Penguin Data Exploration Dashboard\n#  Nick Elias - Elias Analytics\n# ------------------------------------------------------------------------------\n# A Shiny for Python app to explore and visualize the Palmer Penguins dataset.\n# Users can interactively filter the data and view the following visualizations:\n# - Data Table: Display filtered penguin data.\n# - Data Grid: Alternative grid view of the data.\n# - Plotly Histogram: Distribution of a selected attribute.\n# - Plotly Scatter Plot: Relationship between selected attribute and body mass.\n# - Seaborn Histogram: Attribute distribution with KDE by species.\n#\n# Key Libraries:\n# - plotly, seaborn: Visualizations.\n# - shiny: Reactive UI and interactivity.\n# - pandas: Data manipulation.\n# - palmerpenguins: Dataset.\n# ------------------------------------------------------------------------------\n\n\n# Standard Library Imports\nimport logging\n\n# Third-Party Imports\nimport pandas as pd\nimport plotly.express as px\nimport seaborn as sns\nfrom palmerpenguins import load_penguins\n\n# Shiny for Python Imports\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\nfrom shinywidgets import render_plotly, render_widget\nfrom shinyswatch import theme\n\n\n# Set up logging configuration\nlogging.basicConfig(level=logging.ERROR)\n\n\n# Define error handling helper function\ndef validate_data(data, selected_attribute):\n    \"\"\"Check if data is empty or contains NaN values for the selected attribute.\"\"\"\n    # Check if the data is empty or all values are NaN\n    if data.empty or data.isnull().all(axis=None):\n        logging.warning(\"The filtered data is empty or contains only NaN values.\")\n        return False\n\n    # Check if the selected attribute contains NaN values\n    if data[selected_attribute].isnull().any():\n        logging.warning(\n            f\"Selected attribute '{selected_attribute}' contains NaN values.\"\n        )\n\n    return True\n\n\n# Load the penguins dataset\npenguins_df = load_penguins()\n\n# Dictionary for formatting attribute names\nattribute_labels = {\n    \"bill_length_mm\": \"Bill Length (mm)\",\n    \"bill_depth_mm\": \"Bill Depth (mm)\",\n    \"flipper_length_mm\": \"Flipper Length (mm)\",\n    \"body_mass_g\": \"Body Mass (g)\",\n}\n\n# Reverse dictionary for mapping formatted labels back to raw attribute names\nattribute_reverse_map = {v: k for k, v in attribute_labels.items()}\n\n\n# Define a reactive calculation for data filtering\n@reactive.calc\ndef filtered_data() -> pd.DataFrame:\n    \"\"\"Filter penguins dataset based on selected species and island.\"\"\"\n    # Filter based on selected species list\n    filtered_df = penguins_df[\n        penguins_df[\"species\"].isin(input.selected_species_list())\n    ]\n\n    # Filter based on selected island list\n    filtered_df = filtered_df[filtered_df[\"island\"].isin(input.selected_island_list())]\n\n    return filtered_df\n\n\n# --------------------------------------------------------\n# User Interface Section\n# --------------------------------------------------------\n\n# Define UI options with Shiny Express and set the main container as scrollable\nui.page_opts(\n    title=\"Elias Analytics - Penguin Data\",\n    fillable=True,\n    style=\"max-height: 90vh; overflow-y: scroll; padding: 10px;\",\n    fullwidth=True,\n    theme=theme.lux,\n)\n\n# Sidebar for user interactions and selections\nwith ui.sidebar(open=\"open\", bg=\"#CCE7FF\"):\n    ui.h2(\"Options\")\n\n    # Dropdown for selecting penguin attributes for analysis\n    ui.input_selectize(\n        \"selected_attribute\",\n        \"Select Penguin Attribute:\",\n        list(attribute_labels.values()),  # Use the formatted labels\n    )\n\n    # Numeric input for controlling the number of bins in the Plotly histogram\n    ui.input_numeric(\n        \"plotly_bin_count\",\n        \"Plotly Histogram Bins:\",\n        10,  # Default value\n        min=1,\n        max=100,\n    )\n\n    # Slider for setting the number of bins in the Seaborn histogram\n    ui.input_slider(\n        \"seaborn_bin_count\", \"Seaborn Histogram Bins:\", min=5, max=50, value=20\n    )\n\n    # Checkbox group for filtering the dataset by penguin species\n    ui.input_checkbox_group(\n        \"selected_species_list\",\n        \"Filter by Species:\",\n        [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        selected=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        inline=False,\n    )\n\n    # Checkbox group for filtering the dataset by penguin island\n    ui.input_checkbox_group(\n        \"selected_island_list\",\n        \"Filter by Island:\",\n        [\"Biscoe\", \"Dream\", \"Torgersen\"],  # List of islands in the dataset\n        selected=[\"Biscoe\", \"Dream\", \"Torgersen\"],  # Default selected islands\n        inline=False,  # Set inline to False to stack the checkboxes vertically\n    )\n\n    # Horizontal rule for visual separation\n    ui.hr()\n\n    # Link to GitHub repository for additional resources\n    ui.a(\n        \"Link to GitHub\",\n        href=\"https://github.com/NickElias01/cintel-03-reactive\",\n        target=\"_blank\",\n    )\n\n# --------------------------------------------------------\n# Main Content Area\n# --------------------------------------------------------\n\nwith ui.layout_columns(fill=True):\n\n    # Data Table Card\n    with ui.card(full_screen=True):\n        ui.h3(\"Penguin Data Table\")\n\n        @render.data_frame\n        def penguins_datatable():\n            return render.DataTable(filtered_data())\n\n    # Data Grid Card\n    with ui.card(full_screen=True):\n        ui.h3(\"Penguin Data Grid\")\n\n        @render.data_frame\n        def penguins_datagrid():\n            return render.DataGrid(filtered_data())\n\n\nui.hr()\n\nwith ui.layout_columns(fill=True):\n\n    # Plotly Histogram Card\n    with ui.card(full_screen=True):\n        ui.h3(\"Plotly Histogram\")\n\n        @render_widget\n        def histogram_plot():\n            data = pd.DataFrame(filtered_data())\n            attribute = attribute_reverse_map[input.selected_attribute()]\n\n            # Validate data\n            if not validate_data(data, attribute):\n                return None  # Return nothing if data validation fails\n\n            plotly_histogram = px.histogram(\n                data_frame=data,\n                x=attribute,\n                nbins=input.plotly_bin_count(),\n                color=\"species\",\n            ).update_layout(\n                title={\"text\": f\"{input.selected_attribute()} Frequency\", \"x\": 0.5},\n                yaxis_title=\"Count\",\n                xaxis_title=input.selected_attribute(),\n            )\n            return plotly_histogram\n\n    # Plotly Scatter Plot Card\n    with ui.card(full_screen=True):\n        ui.h3(\"Plotly Scatter Plot\")\n\n        @render_widget\n        def scatter_plot():\n            data = pd.DataFrame(filtered_data())\n            attribute = attribute_reverse_map[input.selected_attribute()]\n\n            # Validate data\n            if not validate_data(data, attribute):\n                return None  # Return nothing if data validation fails\n\n            plotly_scatterplot = px.scatter(\n                data_frame=data, x=attribute, y=\"body_mass_g\", color=\"species\"\n            ).update_layout(\n                title={\"text\": f\"{input.selected_attribute()} vs Body Mass(g)\"},\n                yaxis_title=\"Body Mass (g)\",\n                xaxis_title=input.selected_attribute(),\n            )\n            return plotly_scatterplot\n\n    # Seaborn Histogram Card\n    with ui.card(full_screen=True):\n        ui.h3(\"Seaborn Histogram\")\n\n        @render.plot(\n            alt=\"Seaborn histogram of the selected penguin attribute by species, with KDE overlay.\"\n        )\n        def seaborn_histogram():\n            data = pd.DataFrame(filtered_data())\n            attribute = attribute_reverse_map[input.selected_attribute()]\n\n            # Validate data\n            if not validate_data(data, attribute):\n                return None  # Return nothing if data validation fails\n\n            ax = sns.histplot(\n                data=data,\n                x=attribute,\n                bins=input.seaborn_bin_count(),\n                hue=\"species\",\n                element=\"step\",\n                kde=True,\n            )\n            ax.set_title(f\"Distribution of {input.selected_attribute()} by Species\")\n            ax.set_xlabel(input.selected_attribute())\n            ax.set_ylabel(\"Count\")\n            return ax", "type": "text"}]